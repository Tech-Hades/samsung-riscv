#include <ch32v00x.h>
#include <debug.h>

// ✅ Define Ultrasonic Sensor Pins
#define TRIG_PIN  GPIO_Pin_4  // PD4: Trigger pin
#define ECHO_PIN  GPIO_Pin_3  // PD3: Echo pin

// ✅ System Timer Variables
volatile uint32_t millis_counter = 0;

// ✅ Timer 2 Interrupt Handler (Runs Every 1ms)
void TIM2_IRQHandler(void) __attribute__((interrupt("WCH-Interrupt-fast")));
void TIM2_IRQHandler(void) {
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
        millis_counter++;
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
    }
}

// ✅ Custom millis() function for CH32V00x
uint32_t myMillis() {
    return millis_counter;
}

// ✅ Function to configure GPIO for Ultrasonic Sensor
void GPIO_Config(void) {
    GPIO_InitTypeDef GPIO_InitStructure = {0};

    // ✅ Enable GPIO Clock
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);

    // ✅ Configure Trigger Pin (Output)
    GPIO_InitStructure.GPIO_Pin = TRIG_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; // Output Push-Pull
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructure);

    // ✅ Configure Echo Pin (Input with Pull-Up)
    GPIO_InitStructure.GPIO_Pin = ECHO_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
}

// ✅ Function to Trigger Ultrasonic Sensor and Measure Echo Duration
uint32_t Ultrasonic_Read(void) {
    uint32_t duration = 0;

    // ✅ Send 10us Pulse to Trigger
    GPIO_WriteBit(GPIOD, TRIG_PIN, Bit_SET);
    Delay_Us(10);
    GPIO_WriteBit(GPIOD, TRIG_PIN, Bit_RESET);

    // ✅ Wait for Echo HIGH
    uint32_t startTime = myMillis();
    while (GPIO_ReadInputDataBit(GPIOD, ECHO_PIN) == Bit_RESET) {
        if (myMillis() - startTime > 50) return 0; // Timeout (No response)
    }

    // ✅ Measure Echo Pulse Duration
    startTime = myMillis();
    while (GPIO_ReadInputDataBit(GPIOD, ECHO_PIN) == Bit_SET) {
        if (myMillis() - startTime > 50) return 0; // Timeout (Too long)
    }

    duration = myMillis() - startTime;
    return duration;
}

// ✅ Function to Calculate Distance in cm
float Calculate_Distance(uint32_t duration) {
    return (duration / 2.0) * 0.034; // ✅ Speed of sound in air = 340 m/s = 0.034 cm/us
}

// ✅ Setup Function
void setup() {
    SystemCoreClockUpdate();
    GPIO_Config();
    USART_Printf_Init(115200); // ✅ Initialize Serial for Debugging
    printf("Ultrasonic Sensor Initialized!\n");

    // ✅ Initialize Timer 2 (TIM2) for 1ms Timing
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure = {0};
    TIM_TimeBaseInitStructure.TIM_Period = 1000 - 1;  // 1ms period
    TIM_TimeBaseInitStructure.TIM_Prescaler = (SystemCoreClock / 1000000) - 1;
    TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStructure);
    TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
    NVIC_EnableIRQ(TIM2_IRQn);
    TIM_Cmd(TIM2, ENABLE);
}

// ✅ Loop Function
void loop() {
    uint32_t duration = Ultrasonic_Read();
    float distance = Calculate_Distance(duration);

    // ✅ Print Distance to Serial Monitor
    printf("Distance: %.2f cm\n", distance);

    Delay_Ms(1000); // Wait before next reading
}

// ✅ Main Function
int main(void) {
    setup();
    while (1) {
        loop();
    }
}
